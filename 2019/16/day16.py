#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# Solution for https://adventofcode.com/2019/day/16
#

from itertools import cycle

input = list(map(int, list(open("input.txt").read().strip())))

# part 1 samples
#input = list(map(int, list("80871224585914546619083218645595")))
#input = list(map(int, list("19617804207202209144916044189917")))

# part 2 samples
#input = list(map(int, list("03036732577212944063491565474664")))


# part 1
def part1(input):
    pattern = [0,1,0,-1]
    for _ in range(100): # phases
        for n in range(len(input)):
            sum = 0
            for o in range(len(input)):
                m = pattern[((o+1)//(n+1)) % 4]
                    # (o+1) - the first value in pattern is skipped
                    # (n+1) - n starts from 0
                    # (o+1)//(n+1) - for (n+1)th line, value repeats (n+1) times
                sum += input[o] * m
            input[n] = abs(sum) % 10

    print("Part 1: " + "".join(map(str,input[:8])))

'''
Part 2 implementation notes:

The input is repeated 10000 times, so brute forcing doesnt work. We need a
different method than part 1.

The output is 8 digits after the offset, where offset is the first 7 digits of 
the given input. In my case, the first 7 digits were 5,970,951. The total input
length is 650 * 10000 = 6,500,000, which means the offset is around at 91% of
the input length.

Below is a 35x35 grid of the (0,1,0,-1) pattern. "+" is 1 and "-" is -1.
(Generated by pattern.py)

We can see that towards the bottom (which yields the last digits during phase
shift), the digits at the front are multiplied by zero (hence can be ignored),  
and the digits to the right are always added. To make it even simpler, for the 
last digit, it's only the digit itself (everything left to it is multiplied by 
zero). The second last is sum so far plus itself. The third last is the sum so 
far and itself, and so on.

   1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
 1 +   -   +   -   +   -   +   -   +   -   +   -   +   -   +   -   +   -
 2   + +     - -     + +     - -     + +     - -     + +     - -     + +
 3     + + +       - - -       + + +       - - -       + + +       - - -
 4       + + + +         - - - -         + + + +         - - - -
 5         + + + + +           - - - - -           + + + + +           -
 6           + + + + + +             - - - - - -             + + + + + +
 7             + + + + + + +               - - - - - - -               +
 8               + + + + + + + +                 - - - - - - - -
 9                 + + + + + + + + +                   - - - - - - - - -
10                   + + + + + + + + + +                     - - - - - -
11                     + + + + + + + + + + +                       - - -
12                       + + + + + + + + + + + +
13                         + + + + + + + + + + + + +
14                           + + + + + + + + + + + + + +
15                             + + + + + + + + + + + + + + +
16                               + + + + + + + + + + + + + + + +
17                                 + + + + + + + + + + + + + + + + +
18                                   + + + + + + + + + + + + + + + + + +
19                                     + + + + + + + + + + + + + + + + +
20                                       + + + + + + + + + + + + + + + +
21                                         + + + + + + + + + + + + + + +
22                                           + + + + + + + + + + + + + +
23                                             + + + + + + + + + + + + +
24                                               + + + + + + + + + + + +
25                                                 + + + + + + + + + + +
26                                                   + + + + + + + + + +
27                                                     + + + + + + + + +
28                                                       + + + + + + + +
29                                                         + + + + + + +
30                                                           + + + + + +
31                                                             + + + + +
32                                                               + + + +
33                                                                 + + +
34                                                                   + +
35                                                                     +

'''

def part2(input):
    
    # first 7 digits is the skip offset value
    skip = int("".join(map(str, input[:7])))

    # input
    input = input * 10000
    input = input[skip:]

    for _ in range(100): # phases
        sum = 0
        for n in range(len(input)-1, -1 , -1):
            sum += input[n]
            input[n] = abs(sum) % 10

    print("Part 2: " + "".join(map(str,input[:8])))

part1(input[:])
part2(input[:])